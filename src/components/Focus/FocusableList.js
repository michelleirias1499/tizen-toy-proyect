import React, { useEffect } from 'react';
import { withFocusable } from '@noriginmedia/react-spatial-navigation';

//  Can recieve functions such as onBecameFocused, onEnterPress, onKeyDown
//  No need to destructure those props, they are handled by lib
const FocusableList = (props) => {
  //  Parsing props
  const {
    children,
    className,
    tabIndex = 0,
    itemRef,
    onKeyDown,
    focusFirstChild = false,
    focusSelf, // Used on components were onKeyDown is used, (ref is required)
    style,
    //  Props generated by spatial navigation lib
    setFocus,
    focused,
  } = props;

  //  Component did mount
  useEffect(() => {
    if (!focusFirstChild) { return; }
    console.log('ABOUT TO CLL SETFOCUS');
    setFocus();
  }, []);

  //  Watching ref changes (used to set initial focus)
  useEffect(() => {
    if (!itemRef || !itemRef.current || !focusSelf) { return; }
    itemRef.current.focus();
  }, [itemRef]);

  //  Function to handle on key press
  const handleKeyDown = (event) => {
    if (!event || !event.keyCode) { return; }
    const { keyCode } = event;
    if (!onKeyDown) { return; }
    const focusableProps = { setFocus };
    onKeyDown(keyCode, focusableProps);
  };

  //  Rendering
  return (
    <div
      className={`${className || ''}  ${focused ? 'focused' : ''}`}
      onKeyDown={handleKeyDown}
      tabIndex={tabIndex}
      ref={itemRef}
      style={style}
    >
      {children}
    </div>
  );
};

export default withFocusable({ trackChildren: true, autoRestoreFocus: false })(FocusableList);
